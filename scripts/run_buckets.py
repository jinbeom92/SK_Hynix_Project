# =================================================================================================
# Bucket Runner — Orchestrates Per‑Bucket Training Jobs
# -------------------------------------------------------------------------------------------------
# Purpose
#   Reads the buckets/manifest.json generated by `make_buckets.py` and launches a training
#   process for each geometry-consistent bucket. This enables automated, sequential runs
#   across multiple geometries/resolutions without manual intervention.
#
# Behavior
#   • Validates the existence of `manifest.json` under `--buckets-dir`.
#   • Optionally limits the number of processed buckets via `--max-buckets`.
#   • For each bucket entry {bucket, n_ids, config, ...}, invokes:
#         <python_exe> -m hdn_final_v2_refactored.train --cfg <config>
#     and streams the return code; non‑zero exit codes are logged and the loop continues.
#
# CLI
#   python scripts/run_buckets.py \
#       --buckets-dir buckets \
#       --max-buckets 4 \
#       --python /path/to/python
#
# Notes
#   • Uses `sys.executable` by default to ensure the current environment is reused.
#   • Designed to be resilient: failures in individual buckets do not abort the overall run.
#   • Ensure `make_buckets.py` has been executed prior to this script.
# =================================================================================================
import json, subprocess, sys
from pathlib import Path

def main(buckets_dir="buckets", max_buckets=None, python_exe=sys.executable):
    buckets_dir = Path(buckets_dir)
    manifest_p = buckets_dir/"manifest.json"
    if not manifest_p.exists():
        print("No manifest.json found. Run make_buckets.py first.", file=sys.stderr)
        sys.exit(1)
    manifest = json.loads(manifest_p.read_text(encoding="utf-8"))
    if max_buckets is not None:
        manifest = manifest[:max_buckets]

    for m in manifest:
        cfg = m["config"]
        print(f"[Bucket] {m['bucket']}  (n={m['n_ids']})")
        cmd = [python_exe, "-m", "hdn_final_v2_refactored.train", "--cfg", cfg]
        print("  ->", " ".join(cmd))
        ret = subprocess.call(cmd)
        if ret != 0:
            print(f"Bucket {m['bucket']} failed with code {ret}. Continuing...", file=sys.stderr)

if __name__ == "__main__":
    import argparse
    ap = argparse.ArgumentParser()
    ap.add_argument("--buckets-dir", type=str, default="buckets")
    ap.add_argument("--max-buckets", type=int, default=None)
    ap.add_argument("--python", type=str, default=sys.executable)
    args = ap.parse_args()
    main(args.buckets_dir, args.max_buckets, args.python)
