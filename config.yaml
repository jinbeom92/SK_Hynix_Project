# ============================================================================
# Experiment Configuration for HDN
# ----------------------------------------------------------------------------
# This file defines a lightweight yet complete configuration for training the
# Hybrid Decomposition Network (HDN) on a single‑resolution dataset. The HDN
# couples learnable encoders/decoder with a differentiable CT projector:
#   • The geometry section specifies the physical voxel spacing and detector
#     spacing for a parallel‑beam 3D CT scan.
#   • The projector section selects the Joseph projector (GPU‑accelerated via
#     grid_sample:contentReference[oaicite:0]{index=0}) with 8‑angle chunks and a maximum of 64
#     integration steps per ray. The PSF is disabled.
#   • The cheat block enables a training‑only “cheat gate” that injects depth‑wise
#     mean/std features of the ground‑truth volume into the 2D encoder:contentReference[oaicite:1]{index=1}.
#     Aggregate and DFT options are unused; the gate controls the injection weight,
#     and psf_consistent governs whether the detector PSF transpose is applied.
#   • The model section defines modest encoder/decoder widths and depths for
#     Enc1_1D, Enc2_2D (with harmonic angle embeddings), Align2Dto3D (with 64
#     latent channels) and DecoderSinogram.
#   • The losses combine structural similarity (SSIM), negative PSNR, band and
#     energy penalties, voxel error rate, in‑positive dynamic range and a
#     forward‑consistency loss that computes Fourier‑weighted residuals between
#     predicted and input sinograms:contentReference[oaicite:2]{index=2}.
#   • Training parameters include a batch size of one, no gradient accumulation,
#     the Adafactor optimizer, automatic mixed precision, TF32 kernels and
#     gradient clipping. DataLoader workers and checkpoint intervals are set
#     for efficient experimentation.
# ============================================================================
io:
  data_root: dataset

geometry:
  voxel_size: [1.0, 1.0, 1.0]
  det_spacing: [1.0, 1.0]

projector:
  method: joseph3d     #joseph3d|siddon3d
  angle_chunk: 4
  step_chunk: 2
  c_chunk: 2
  joseph:
    n_steps_cap: 16
  psf:
    enabled: false
  
cheat:
  enabled: true
  # aggregate: angle_mean
  # dft_K: 2
  gate: 0.35
  train_only: true
  psf_consistent: false

model:
  enc1: { base: 8, depth: 2 }
  enc2: { base: 8, depth: 2, harm_K: 2 }
  enc3: { enabled: false, base: 8, depth: 2 }
  align: { out_ch: 16, bp_ch: 2 }
  dec:   { mid_ch: 16, n_proj_ch: 2 }

losses:
  renorm: true
  weights:
    ssim: 0.25
    psnr: 0.10
    band: 0.10
    energy: 0.10
    ver: 0.15
    ipdr: 0.15
    forward: 0.15
  band_low: 0.0
  band_high: 1.0
  ver_thr: 0.1
  tv: 0.0
  fwd_freq_alpha: 0.7

train:
  shared_model: true
  seed: 42
  epochs: 5
  batch_size: 1
  grad_accum_steps: 1
  optimizer: adamw    # adamw/adafactor
  lr: 1.0e-4
  weight_decay: 0.0
  amp: true
  amp_dtype: auto         # auto/bf16/fp16/fp32
  tf32: true
  grad_clip: 1.0
  num_workers: 2
  prefetch_factor: 1
  persistent_workers: false
  compile: false
  flush_every: 1
  empty_cache_every: 2
  ckpt_dir: results/ckpt
  ckpt_interval: 1
